ctrlport:
  type: master-slave
  ports:
  - name: ctrlport_req_wr
    type: from-master
  - name: ctrlport_req_rd
    type: from-master
  - name: ctrlport_req_addr
    type: from-master
    width: 20
  - name: ctrlport_req_data
    type: from-master
    width: 32
  - name: ctrlport_req_byte_en
    type: from-master
    width: 4
  - name: ctrlport_req_has_time
    type: from-master
  - name: ctrlport_req_time
    type: from-master
    width: 64
  - name: ctrlport_resp_ack
    type: to-master
  - name: ctrlport_resp_status
    type: to-master
    width: 2
  - name: ctrlport_resp_data
    type: to-master
    width: 32

timekeeper:
  type: broadcaster-listener
  ports:
  - name: radio_time
    width: 64

# Radio interface (up to 32 channels or 32 samples per clock)
radio:
  type: master-slave
  parameters:
    spc: 1
    num_ports: 2
  ports:
  - name: radio_rx_data
    type: from-master
    width: ${32*int(parameters['spc'])*int(parameters['num_ports']) if isinstance(parameters['spc'], int) and isinstance(parameters['num_ports'], int) else f"32*{parameters['spc']}*{parameters['num_ports']}"}
  - name: radio_rx_stb
    type: from-master
    width: ${parameters['num_ports']}
  - name: radio_rx_running
    type: to-master
    width: ${parameters['num_ports']}
  - name: radio_tx_data
    type: to-master
    width: ${32*int(parameters['spc'])*int(parameters['num_ports']) if isinstance(parameters['spc'], int) and isinstance(parameters['num_ports'], int) else f"32*{parameters['spc']}*{parameters['num_ports']}"}
  - name: radio_tx_stb
    type: from-master
    width: ${parameters['num_ports']}
  - name: radio_tx_running
    type: to-master
    width: ${parameters['num_ports']}

# AXI4 memory-mapped interface (up to 8 x 512-bit data and 48-bit address)
axi4_mm:
  type: master-slave
  ports:
  - name: axi_rst
    type: to-master
    width: 1
  - name: m_axi_awid
    type: from-master
    width: 8
  - name: m_axi_awaddr
    type: from-master
    width: 384
  - name: m_axi_awlen
    type: from-master
    width: 64
  - name: m_axi_awsize
    type: from-master
    width: 24
  - name: m_axi_awburst
    type: from-master
    width: 16
  - name: m_axi_awlock
    type: from-master
    width: 8
  - name: m_axi_awcache
    type: from-master
    width: 32
  - name: m_axi_awprot
    type: from-master
    width: 24
  - name: m_axi_awqos
    type: from-master
    width: 32
  - name: m_axi_awregion
    type: from-master
    width: 32
  - name: m_axi_awuser
    type: from-master
    width: 8
  - name: m_axi_awvalid
    type: from-master
    width: 8
  - name: m_axi_awready
    type: to-master
    width: 8
    safe: "8'hFF"
  - name: m_axi_wdata
    type: from-master
    width: 4192
  - name: m_axi_wstrb
    type: from-master
    width: 512
  - name: m_axi_wlast
    type: from-master
    width: 8
  - name: m_axi_wuser
    type: from-master
    width: 8
  - name: m_axi_wvalid
    type: from-master
    width: 8
  - name: m_axi_wready
    type: to-master
    width: 8
    safe: "8'hFF"
  - name: m_axi_bid
    type: to-master
    width: 8
  - name: m_axi_bresp
    type: to-master
    width: 16
  - name: m_axi_buser
    type: to-master
    width: 8
  - name: m_axi_bvalid
    type: to-master
    width: 8
  - name: m_axi_bready
    type: from-master
    width: 8
    safe: "8'hFF"
  - name: m_axi_arid
    type: from-master
    width: 8
  - name: m_axi_araddr
    type: from-master
    width: 384
  - name: m_axi_arlen
    type: from-master
    width: 64
  - name: m_axi_arsize
    type: from-master
    width: 24
  - name: m_axi_arburst
    type: from-master
    width: 16
  - name: m_axi_arlock
    type: from-master
    width: 8
  - name: m_axi_arcache
    type: from-master
    width: 32
  - name: m_axi_arprot
    type: from-master
    width: 32
  - name: m_axi_arqos
    type: from-master
    width: 32
  - name: m_axi_arregion
    type: from-master
    width: 32
  - name: m_axi_aruser
    type: from-master
    width: 8
  - name: m_axi_arvalid
    type: from-master
    width: 8
  - name: m_axi_arready
    type: to-master
    width: 8
    safe: "8'hFF"
  - name: m_axi_rid
    type: to-master
    width: 8
  - name: m_axi_rdata
    type: to-master
    width: 4192
  - name: m_axi_rresp
    type: to-master
    width: 16
  - name: m_axi_rlast
    type: to-master
    width: 8
  - name: m_axi_ruser
    type: to-master
    width: 8
  - name: m_axi_rvalid
    type: to-master
    width: 8
  - name: m_axi_rready
    type: from-master
    width: 8
    safe: "8'hFF"

axis_chdr:
  # CHDR over AXI-Stream, e.g. between the crossbar and transport adapters.
  # There is no tuser here, because all the metadata is in the CHDR header.
  parameters:
    width: 64
  type: master-slave
  ports:
  - name: tdata
    type: to-master
    width: "${parameters['width']}"
  - name: tlast
    type: to-master
    width: 1
  - name: tvalid
    type: to-master
    width: 1
  - name: tready
    type: from-master
    width: 1

  #
  # - TODO
  #
  # Register Access (AXI-Lite)
  # - TODO
  #
  # DMA (AXI-Stream)
  # - TODO
  #
  # Transceiver Pins
  # - TODO
  #
  # Misc Pins
  # - Port Info x 4 (Output from transport adapter to tell software via global_regs what type of bitstream is loaded, e.g., X4, CG, etc.)
  # - IRQ x 4
  # - Link Up x 4
  # - Link Activity x 4

pps:
  type: broadcaster-listener
  ports:
  - name: pps
    width: 1
