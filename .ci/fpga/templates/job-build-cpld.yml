#
# Copyright 2025 Ettus Research, a National Instruments Brand
#
# SPDX-License-Identifier: LGPL-3.0-or-later
#
# Description:
#
#   This template should be used for CPLD builds.
#   Exports the final programming files as pipeline artifacts.
#
#   See description for the parameters below.
#

parameters:
  # Publishes the intermediate files from the build-* directories as pipeline artifacts.
  - name: publish_int_files
    type: boolean
    default: false

  # cpldBuilds: List of CPLD builds to be executed
  # each element is a list of 3 strings (displayName, workingDirectory, artifactName)
  # e.g ['ZBX CPLD Build', './top/x400/dboards/zbx/cpld', 'CPLD_ZBX']
  - name: cpldBuilds
    type: object
    default: []

jobs:
- ${{ each cpldBuild in parameters.cpldBuilds }}:
  - job:
    displayName: ${{ cpldBuild.displayName }}
    timeoutInMinutes: 30
    pool:
      name: Drivers-NIBuildFarm-RFMIBUILD
      demands:
      - Agent.OS -equals Linux
    variables:
    - group: sdr-pipeline-vars
    steps:
      - template: setup_steps.yml

      - bash: |
          # Find the directory containing setupenv.sh by searching upwards from the working directory
          search_dir="${{ cpldBuild.workingDirectory }}"
          while [[ "$search_dir" != "." && "$search_dir" != "/" ]]; do
            if [[ -f "$search_dir/setupenv.sh" ]]; then
              setup_dir="$search_dir"
              break
            fi
            search_dir="$(dirname "$search_dir")"
          done

          if [[ -z "$setup_dir" ]]; then
            echo "setupenv.sh not found in hierarchy."
            exit 1
          else
            echo "Found setupenv.sh in: $setup_dir"
          fi

          source $(Build.SourcesDirectory)/uhddev/.ci/fpga/scripts/run_setup.sh $setup_dir

          echo "---- Run build: ${{ cpldBuild.displayName }} ----"
          cd ${{ cpldBuild.workingDirectory }}
          make
        workingDirectory: uhddev/fpga/usrp3
        env:
          PATCHES_PATH: $(sdr-vivado-patches)
        displayName: ${{ cpldBuild.displayName }}

      # Publish the final result only if all previous steps passed
      - publish: uhddev/fpga/usrp3/${{ cpldBuild.workingDirectory }}/build
        artifact: ${{ cpldBuild.artifactName }}
        displayName: 'Publish ${{ cpldBuild.displayName }}'

      # Publish CPLD build intermediate files on request (even if the build failed)
      # Publish uhddev/fpga/usrp3/${{ cpldBuild.workingDirectory }}/build-*
      - bash: |
          cd ${{ cpldBuild.workingDirectory }}
          cp -r build-* $(Build.ArtifactStagingDirectory)
        workingDirectory: uhddev/fpga/usrp3
        env:
          PATCHES_PATH: $(sdr-vivado-patches)
        displayName: 'Copy build directories'
        condition: and(always(), eq('${{ parameters.publish_int_files }}', true))

      - publish: $(Build.ArtifactStagingDirectory)
        artifact: '${{ cpldBuild.artifactName }}_Build_Directory Attempt $(System.JobAttempt)'
        displayName: 'Publish ${{ cpldBuild.displayName }} Directory'
        condition: and(always(), eq('${{ parameters.publish_int_files }}', true))

      # Check if CPLD build left any untracked files.
      - template: check_clean_repo_steps.yml
        parameters:
          directory: uhddev/
