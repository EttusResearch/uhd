parameters:
  - name: publish_int_files
    type: boolean
    default: false

  # cpldBuilds: List of CPLD builds to be executed
  # each element is a list of 3 strings (displayName, workingDirectory, artifactName)
  # e.g ['ZBX CPLD Lattice Build', './top/x400/dboards/zbx/cpld', 'CPLD_ZBX']
  - name: cpldBuilds
    type: object
    default: []

jobs:
- ${{ each cpldBuild in parameters.cpldBuilds }}:
  - job:
    displayName: ${{ cpldBuild.displayName }}
    timeoutInMinutes: 30
    pool:
      name: Drivers-NIBuildFarm-RFMIBUILD
      demands:
      - Agent.OS -equals Linux
    variables:
    - group: sdr-pipeline-vars
    steps:
      - template: setup_steps.yml

      - bash: |
          source $(Build.SourcesDirectory)/uhddev/.ci/fpga/scripts/run_setup.sh ./top/x400

          echo "---- Run build: ${{ cpldBuild.displayName }} ----"
          cd ${{ cpldBuild.workingDirectory }}
          make
        workingDirectory: uhddev/fpga/usrp3
        env:
          PATCHES_PATH: $(sdr-vivado-patches)
        displayName: ${{ cpldBuild.displayName }}

      # Publish the final result only if all previous steps passed
      - publish: uhddev/fpga/usrp3/${{ cpldBuild.workingDirectory }}/build
        artifact: ${{ cpldBuild.artifactName }}
        displayName: 'Publish ${{ cpldBuild.displayName }}'

      # Publish CPLD build intermediate files on request
      # Publish uhddev/fpga/usrp3/${{ cpldBuild.workingDirectory }}/build-*
      - bash: |
          cd ${{ cpldBuild.workingDirectory }}
          cp -r build-* $(Build.ArtifactStagingDirectory)
        workingDirectory: uhddev/fpga/usrp3
        env:
          PATCHES_PATH: $(sdr-vivado-patches)
        displayName: 'Copy build directories'
        condition: and(always(), eq('${{ parameters.publish_int_files }}', true))

      - publish: $(Build.ArtifactStagingDirectory)
        artifact: '${{ cpldBuild.artifactName }}_Build_Directory Attempt $(System.JobAttempt)'
        displayName: 'Publish ${{ cpldBuild.displayName }} Directory'
        condition: and(always(), eq('${{ parameters.publish_int_files }}', true))

      # Check if CPLD build left any untracked files.
      - template: check_clean_repo_steps.yml
        parameters:
          directory: uhddev/
