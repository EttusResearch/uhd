#
# Copyright 2021 Ettus Research, a National Instruments Brand
#
# SPDX-License-Identifier: LGPL-3.0-or-later
#

parameters:
- name: add_tests
  type: string
  default: "none"
- name: remove_tests
  type: string
  default: "none"
- name: skip_rule_checking
  type: boolean
  default: False
- name: custom_boost_version
  type: boolean
  default: false
- name: custom_boost_version_url
  type: string
  default: 'https://boostorg.jfrog.io/artifactory/main/release/1.76.0/source/boost_1_76_0.tar.bz2'
- name: release_binaries
  type: boolean
  default: false
- name: testLength
  type: string
  default: 'smoke'
- name: create_sbom
  type: boolean
  displayName: Create SBOM for filesystem images
  default: true
- name: build_sdk
  type: boolean
  default: false
- name: cache_sstate
  type: boolean
  default: true
- name: build_e310_sg1
  type: boolean
  default: true
- name: build_e310_sg3
  type: boolean
  default: true
- name: build_e320
  type: boolean
  default: true
- name: build_n3xx
  type: boolean
  default: true
- name: build_x4xx
  type: boolean
  default: true
- name: fpga_imgs_source
  type: string
  displayName: FPGA Images Source
  default: 'Mono Pipeline'
  values:
  - 'files.ettus.com (Public)'
  - 'Internal Repo'
  - 'Mono Pipeline'
  - 'Mono Pipeline PR'
  - 'FPGA Pipeline'
### FPGA parameters
## Optional parameters
# Run testbenches
- name: run_testbenches
  type: boolean
  default: true
# Option to ignore cached artifacts (if available) and perform
# a clean IP build.
- name: clean_ip_build
  type: boolean
  default: false
# Number of parallel jobs to use for IP build
- name: num_ip_jobs
  type: number
  default: 5
# Option to publish intermediate files
- name: publish_int_files
  type: boolean
  default: false
# Package and publish images
- name: package_and_publish_images
  type: boolean
  default: true
# Package access in the SDR server ('Internal' or 'Public')
- name: package_access
  type: string
  default: 'Internal'
# Requested X410 targets (if build_x410 is true)
- name: x410_targets_matrix
  type: object
  default:
    X410_X4_400:
      image_core: x410_X4_400_rfnoc_image_core.yml
      image_core_name: usrp_x410_fpga_X4_400
      artifact_name: X410_X4_400
      timeout: 720
      max_attempts: 2
    X410_UC_200:
      image_core: x410_UC_200_rfnoc_image_core.yml
      image_core_name: usrp_x410_fpga_UC_200
      artifact_name: X410_UC_200
      timeout: 720
      max_attempts: 2
    X410_X4_200:
      image_core: x410_X4_200_rfnoc_image_core.yml
      image_core_name: usrp_x410_fpga_X4_200
      artifact_name: X410_X4_200
      timeout: 720
      max_attempts: 2
    X410_CG_400:
      image_core: x410_CG_400_rfnoc_image_core.yml
      image_core_name: usrp_x410_fpga_CG_400
      artifact_name: X410_CG_400
      timeout: 720
      max_attempts: 2
    X410_FFT_BLOCK_TEST:
      image_core: ../../../../host/tests/rfnoc_block_tests_on_target/x410_fft_block_test.yml
      image_core_name: usrp_x410_fpga_fft_block_test
      artifact_name: X410_FFT_BLOCK_TEST
      timeout: 720
      max_attempts: 2
# Requested X440 targets
- name: x440_targets_matrix
  type: object
  default:
    X440_CG_1600:
      image_core: x440_CG_1600_rfnoc_image_core.yml
      image_core_name: usrp_x440_fpga_CG_1600
      artifact_name: X440_CG_1600
      timeout: 720
      max_attempts: 2
    X440_CG_400:
      image_core: x440_CG_400_rfnoc_image_core.yml
      image_core_name: usrp_x440_fpga_CG_400
      artifact_name: X440_CG_400
      timeout: 720
      max_attempts: 2
    X440_X4_1600:
      image_core: x440_X4_1600_rfnoc_image_core.yml
      image_core_name: usrp_x440_fpga_X4_1600
      artifact_name: X440_X4_1600
      timeout: 720
      max_attempts: 2
    X440_X4_400:
      image_core: x440_X4_400_rfnoc_image_core.yml
      image_core_name: usrp_x440_fpga_X4_400
      artifact_name: X440_X4_400
      timeout: 720
      max_attempts: 2
    X440_X4_200:
      image_core: x440_X4_200_rfnoc_image_core.yml
      image_core_name: usrp_x440_fpga_X4_200
      artifact_name: X440_X4_200
      timeout: 720
      max_attempts: 2

variables:
- template: ../uhd-pipeline-vars.yml

resources:
  pipelines:
  - pipeline: uhd_build_docker_container
    source: 'uhddev Build Docker Containers'
    branch: master
  - pipeline: usrp-kas-pipeline
    source: 'usrp-kas'
    branch: kirkstone
  - pipeline: uhd_mono_pipeline
    source: 'uhddev mono pipeline'
    branch: master
  - pipeline: uhd_mono_pipeline_pr
    source: 'uhddev mono pipeline PR'
    branch: master
  # Keep this for now, but it should be removed once the mono pipeline is
  # fully populated.
  - pipeline: uhd_fpga_pipeline
    source: 'uhddev fpga pipeline'
    branch: master
  repositories:
  - repository: meta-ettus
    type: github
    name: EttusResearch/meta-ettus-dev
    endpoint: EttusResearch
    ref: kirkstone
  - repository: gnuradio
    type: github
    name: gnuradio/gnuradio
    endpoint: EttusResearch
    ref: maint-3.10
  - repository: volk
    type: github
    name: gnuradio/volk
    endpoint: EttusResearch
    # 3.1.2 is the latest release at the moment. The maint branch hasn't been
    # updated in years and directly using main would be risky.
    ref: refs/tags/v3.1.2
  - repository: gnuradio-3-8
    type: github
    name: gnuradio/gnuradio
    endpoint: EttusResearch
    ref: maint-3.8
  - repository: gr-ettus
    type: github
    name: EttusResearch/gr-ettusdev
    endpoint: EttusResearch
    ref: master
  - repository: ettus-rts
    type: github
    endpoint: EttusResearch
    name: EttusResearch/ettus-rts
    ref: master
  - repository: hwtools
    type: git
    ref: refs/tags/pip/hwsetup/0.1/0.1.3
    name: DevCentral/hwtools
  - repository: labview-usrp-examples
    type: github
    endpoint: EttusResearch
    name: ni/labview-usrp-examples
    ref: main

stages:
###############################################################################
# Changeset Analyzer
# This stage will analyze code that is being tested, and generate variables
# that can be used to control conditional execution of future stages. Any
# stage that shall run conditionally must therefore depend on this stage.
###############################################################################
- stage: analyze_changeset
  displayName: Analyze Changeset
  dependsOn: []
  jobs:
  - template: job-analyze-changeset.yml
    parameters:
      ${{ if eq(parameters.fpga_imgs_source, 'Mono Pipeline PR') }}:
        reference_pipeline_name: uhd_mono_pipeline_pr
      ${{ elseif eq(parameters.fpga_imgs_source, 'FPGA Pipeline') }}:
        reference_pipeline_name: uhd_fpga_pipeline
      ${{ else }}:
        reference_pipeline_name: uhd_mono_pipeline
      add_tests: ${{ parameters.add_tests }}
      remove_tests: ${{ parameters.remove_tests }}
      skip_rule_checking: ${{ parameters.skip_rule_checking }}

###############################################################################
# SW Building & Testing Stages. No FPGA, no hardware involved.
###############################################################################
- stage: build_uhd_stage_linux
  displayName: Build UHD Linux
  dependsOn: analyze_changeset
  # This will make $(UhdTestList) available to jobs/steps/tasks, but not for the
  # condition.
  variables:
    UhdTestList: $[stageDependencies.analyze_changeset.analyze.outputs['gen_testlist.UhdTestList']]
  # This stage is executed if any of these are true:
  # - build_linux is set to Force-yes
  # - build_linux is set to auto, and the UhdTestList contains UHD Linux builds
  condition: >
    and(succeeded(),
      or(
        contains(dependencies.analyze_changeset.outputs['analyze.gen_testlist.UhdTestList'], 'uhd.build.linux'),
        contains(dependencies.analyze_changeset.outputs['analyze.gen_testlist.UhdTestList'], 'uhd.build.all')
      )
    )
  jobs:
  - template: job-get-latest-uhd-docker.yml
  - template: job-uhd-build-src.yml
    parameters:
      toolset: make
  - template: job-uhd-build-src.yml
    parameters:
      toolset: make_trace
  - template: job-uhd-build-src.yml
    parameters:
      toolset: ninja
  - ${{ if parameters.custom_boost_version }}:
    - template: job-uhd-build-src.yml
      parameters:
        toolset: make_custom_boost_version
        custom_boost_version_url: ${{ parameters.custom_boost_version_url }}

- stage: build_rfnoc_modtool_stage_linux
  displayName: Build and Test RFNoC Modtool
  dependsOn:
  - build_uhd_stage_linux
  - analyze_changeset
  variables:
    UhdTestList: $[stageDependencies.analyze_changeset.analyze.outputs['gen_testlist.UhdTestList']]
  condition: >
    and(succeeded(),
        contains(dependencies.analyze_changeset.outputs['analyze.gen_testlist.UhdTestList'], 'uhd.rfnoc_modtool.')
    )
  jobs:
  - template: job-get-latest-uhd-docker.yml
  - template: job-rfnoc_modtool-test-sw.yml
  - template: job-rfnoc_modtool-test-testbenches.yml

- stage: build_uhd_stage_mac
  displayName: Build UHD macOS
  dependsOn: analyze_changeset
  condition: >
    and(succeeded(),
        or(
          contains(dependencies.analyze_changeset.outputs['analyze.gen_testlist.UhdTestList'], 'uhd.build.mac'),
          contains(dependencies.analyze_changeset.outputs['analyze.gen_testlist.UhdTestList'], 'uhd.build.all')
        )
    )
  jobs:
  - template: job-get-latest-uhd-docker.yml
  - template: job-uhd-build-src.yml
    parameters:
      toolset: make_homebrew_macos

- stage: build_uhd_embedded_system_images
  displayName: Build UHD Embedded System Images
  dependsOn: analyze_changeset
  # This can be improved:
  # Right now, if any embedded condition is true, then all embedded targets
  # with a checkbox will be built.
  condition: >
    and(
      succeeded(),
      or(
        contains(dependencies.analyze_changeset.outputs['analyze.gen_testlist.UhdTestList'], 'uhd.build.all'),
        contains(dependencies.analyze_changeset.outputs['analyze.gen_testlist.UhdTestList'], 'uhd.build.linux'),
        contains(dependencies.analyze_changeset.outputs['analyze.gen_testlist.UhdTestList'], 'mpm.build'),
        contains(dependencies.analyze_changeset.outputs['analyze.gen_testlist.UhdTestList'], 'hw.streaming.all'),
        contains(dependencies.analyze_changeset.outputs['analyze.gen_testlist.UhdTestList'], 'hw.streaming.e3'),
        contains(dependencies.analyze_changeset.outputs['analyze.gen_testlist.UhdTestList'], 'hw.streaming.n3'),
        contains(dependencies.analyze_changeset.outputs['analyze.gen_testlist.UhdTestList'], 'hw.streaming.x4'),
        contains(dependencies.analyze_changeset.outputs['analyze.gen_testlist.UhdTestList'], 'hw.rf.all'),
        contains(dependencies.analyze_changeset.outputs['analyze.gen_testlist.UhdTestList'], 'hw.rf.e3'),
        contains(dependencies.analyze_changeset.outputs['analyze.gen_testlist.UhdTestList'], 'hw.rf.n3'),
        contains(dependencies.analyze_changeset.outputs['analyze.gen_testlist.UhdTestList'], 'hw.rf.x4'),
        contains(dependencies.analyze_changeset.outputs['analyze.gen_testlist.UhdTestList'], 'devtest.all'),
        contains(dependencies.analyze_changeset.outputs['analyze.gen_testlist.UhdTestList'], 'devtest.e3'),
        contains(dependencies.analyze_changeset.outputs['analyze.gen_testlist.UhdTestList'], 'devtest.n3'),
        contains(dependencies.analyze_changeset.outputs['analyze.gen_testlist.UhdTestList'], 'devtest.x4')
      )
    )
  variables:
    AUTO_CONF: $(Agent.BuildDirectory)/auto.conf
  jobs:
    - template: .ci/templates/job_build_filesystem.yml@meta-ettus
      parameters:
        create_sbom: ${{ parameters.create_sbom }}
        build_sdk: ${{ parameters.build_sdk }}
        cache_sstate: ${{ parameters.cache_sstate }}
        cache_downloads: False
        machines:
          - ${{ if parameters.build_e310_sg1 }}:
            - e310_sg1
          - ${{ if parameters.build_e310_sg3 }}:
            - e310_sg3
          - ${{ if parameters.build_e320 }}:
            - e320
          - ${{ if parameters.build_n3xx }}:
            - n3xx
          - ${{ if parameters.build_x4xx }}:
            - x4xx
        auto_conf: $AUTO_CONF
        run_from_external_repo: true
        prebuild_steps:
        - script: |
            rm $(AUTO_CONF)
            touch $(AUTO_CONF)
          displayName: create auto.conf
        - template: .ci/templates/oe_localconf_externalsrc.yml@meta-ettus
          parameters:
            conf_file: $AUTO_CONF
            repository: self
            package_paths:
              - package: uhd
                path: host
              - package: mpmd
                path: mpm
        # If requested, we set a variable "UHD_BASE_URL", which is consumed by
        # the uhd-fpga-images recipe to an internal file server which is closer
        # to the build machines. It is simply appended to auto.conf, where
        # bitbake will pick it up and apply it to the recipe.
        - ${{ if contains(parameters.fpga_imgs_source, 'Internal') }}:
          - bash: |
              cat <<EOF >>$AUTO_CONF
              UHD_BASE_URL = "$FILE_SERVER_URL"
              EOF
            env:
              FILE_SERVER_URL: $(InternalFileServerUrl)
        postbuild_steps:
        - script: |
            rm $(AUTO_CONF)
          displayName: delete auto.conf
          condition: always()

- stage: package_uhd_src
  displayName: Package UHD Source
  dependsOn: analyze_changeset
  jobs:
  - template: job-get-latest-uhd-docker.yml
  - template: job-uhd-package-src.yml
    parameters:
      uhdSrcDir: $(Build.SourcesDirectory)
      uhdBuildDir: $(Build.BinariesDirectory)/uhddev/build
      release_binaries: ${{ parameters.release_binaries }}

- stage: build_gnuradio_stage_linux
  displayName: Build gnuradio Linux
  dependsOn:
  - build_uhd_stage_linux
  - analyze_changeset
  # Anytime we build UHD, we also rebuild GNU Radio to see if we broke compat.
  condition: >
    and(succeeded(),
        or(
          contains(dependencies.analyze_changeset.outputs['analyze.gen_testlist.UhdTestList'], 'uhd.build.linux'),
          contains(dependencies.analyze_changeset.outputs['analyze.gen_testlist.UhdTestList'], 'uhd.build.all')
        )
    )
  jobs:
  - template: job-get-latest-uhd-docker.yml
  - template: job-gnuradio-grettus-build-src.yml
    parameters:
      toolset: make

- stage: build_uhd_installer_stage_ubuntu
  displayName: Build UHD Installers Ubuntu
  dependsOn: build_uhd_stage_linux
  jobs:
    - template: job-get-latest-uhd-docker.yml
    - template: job-uhd-build-installer.yml
      parameters:
        toolset: ubuntu_deb
        installer: deb

- stage: build_uhd_installer_stage_fedora
  displayName: Build UHD Installers Fedora
  dependsOn: build_uhd_stage_linux
  jobs:
    - template: job-get-latest-uhd-docker.yml
    - template: job-uhd-build-installer.yml
      parameters:
        toolset: fedora_rpm
        installer: rpm
        releaseBinaries: ${{ parameters.release_binaries }}

- stage: build_uhd_installer_stage_win
  displayName: Build UHD Installers Windows
  dependsOn: analyze_changeset
  condition: >
    and(succeeded(),
      or(
        contains(dependencies.analyze_changeset.outputs['analyze.gen_testlist.UhdTestList'], 'uhd.build.windows'),
        contains(dependencies.analyze_changeset.outputs['analyze.gen_testlist.UhdTestList'], 'uhd.build.all')
      )
    )
  jobs:
    - template: job-get-latest-uhd-docker.yml
    - template: job-uhd-build-installer.yml
      parameters:
        toolset: msbuild
        installer: nsis
        releaseBinaries: ${{ parameters.release_binaries }}
        ${{ if contains(parameters.fpga_imgs_source, 'files.ettus.com') }}:
          fpga_imgs_source: 'files.ettus.com'
        ${{ else }}:
          fpga_imgs_source: 'Internal'
    - ${{ if parameters.release_binaries }}:
      - template: job-uhd-build-installer-signing.yml
        parameters:
          toolset: msbuild
          installer: nsis

###############################################################################
# FPGA Stages. Here, we build bitfiles (or at least download the right artifacts)
###############################################################################

### START: Testbenches stage

- stage: run_testbenches_stage
  displayName: Run Testbenches
  dependsOn: analyze_changeset
  condition: >
    and(succeeded(),
      contains(dependencies.analyze_changeset.outputs['analyze.gen_testlist.UhdTestList'], 'fpga.usrp3.testbenches')
    )
  jobs:
  - template: ../fpga/templates/job-run-testbenches.yml

### END: Testbenches stage

### START: CPLD Build Stage

- stage: build_cpld_stage
  displayName: x4xx CPLD Build Stage
  dependsOn: analyze_changeset
  condition: >
    and(succeeded(),
      contains(dependencies.analyze_changeset.outputs['analyze.gen_testlist.UhdTestList'], 'fpga.usrp3.cpld.x4xx')
    )
  jobs:
  - template: ../fpga/templates/job-build-cpld.yml
    parameters:
      publish_int_files: true
      cpldBuilds:
        - displayName: 'MB CPLD Build'
          workingDirectory: './top/x400/cpld'
          artifactName: 'CPLD_MB'
        - displayName: 'ZBX CPLD Build'
          workingDirectory: './top/x400/dboards/zbx/cpld'
          artifactName: 'CPLD_ZBX'

### END: CPLD Build Stage

### START: Regmap stage

- stage: regmap
  dependsOn: analyze_changeset
  condition: >
    and(succeeded(),
      contains(dependencies.analyze_changeset.outputs['analyze.gen_testlist.UhdTestList'], 'fpga.usrp3.regmaps')
    )
  displayName: 'Check Regmaps'
  jobs:
  - template: ../fpga/templates/job-regmap.yml

### END: Regmap stage

- template: ../fpga/templates/job-build-fpga-all.yml
  parameters:
    clean_ip_build: ${{ parameters.clean_ip_build }}
    publish_int_files: ${{ parameters.publish_int_files }}
    package_and_publish_images: ${{ parameters.package_and_publish_images }}
    package_access: ${{ parameters.package_access }}
    fpga_imgs_source: ${{ parameters.fpga_imgs_source }}
    x410_targets_matrix: ${{ parameters.x410_targets_matrix }}
    x440_targets_matrix: ${{ parameters.x440_targets_matrix }}

###############################################################################
# Hardware Test Stages. These require having valid software and FPGA images.
###############################################################################
- stage: devtest_uhd_x3xx_b2xx_stage
  displayName: Dev Test UHD x3xx b2xx
  dependsOn:
  - analyze_changeset
  - build_uhd_stage_linux
  - provide_x300_fpga_images_stage
  - provide_x310_fpga_images_stage
  condition: >
    and(
      succeeded(),
      or(
        contains(dependencies.analyze_changeset.outputs['analyze.gen_testlist.UhdTestList'], 'devtest.all'),
        contains(dependencies.analyze_changeset.outputs['analyze.gen_testlist.UhdTestList'], 'devtest.b2'),
        contains(dependencies.analyze_changeset.outputs['analyze.gen_testlist.UhdTestList'], 'devtest.x3')
      )
    )
  jobs:
  - template: job-uhd-devtest-rhombus.yml
    parameters:
      uhdSrcDir: $(Build.SourcesDirectory)
      fpga_imgs_source: ${{ parameters.fpga_imgs_source }}
      testDevices: 'x3xx,b2xx'
  - template: job-uhd-devtest-s175.yml
    parameters:
      uhdSrcDir: $(Build.SourcesDirectory)
      fpga_imgs_source: ${{ parameters.fpga_imgs_source }}
      testDevices: 'b2xx'

- stage: devtest_uhd_n3xx_e320_stage
  displayName: Dev Test UHD n3xx e320
  dependsOn:
  - analyze_changeset
  - build_uhd_stage_linux
  - build_uhd_embedded_system_images
  - provide_n300_fpga_images_stage
  - provide_n310_fpga_images_stage
  - provide_n320_fpga_images_stage
  - provide_e320_fpga_images_stage
  condition: >
    and(
      succeeded(),
      or(
        contains(dependencies.analyze_changeset.outputs['analyze.gen_testlist.UhdTestList'], 'devtest.all'),
        contains(dependencies.analyze_changeset.outputs['analyze.gen_testlist.UhdTestList'], 'devtest.n3'),
        contains(dependencies.analyze_changeset.outputs['analyze.gen_testlist.UhdTestList'], 'devtest.e320')
      )
    )
  jobs:
  - template: job-uhd-devtest-rhombus.yml
    parameters:
      uhdSrcDir: $(Build.SourcesDirectory)
      fpga_imgs_source: ${{ parameters.fpga_imgs_source }}
      testDevices: 'n3xx,e320'

- stage: test_uhd_x4xx_sdrtest0_stage
  displayName: RF Test UHD x4xx sdr-test0
  dependsOn:
  - analyze_changeset
  - build_uhd_stage_linux
  - build_uhd_embedded_system_images
  - build_gnuradio_stage_linux
  - provide_x410_fpga_images_stage
  - provide_x440_fpga_images_stage
  # This will make $(UhdTestList) available to jobs/steps/tasks, but not for the
  # condition.
  variables:
    UhdTestList: $[stageDependencies.analyze_changeset.analyze.outputs['gen_testlist.UhdTestList']]
  condition: >
    and(
      succeeded(),
      or(
        contains(dependencies.analyze_changeset.outputs['analyze.gen_testlist.UhdTestList'], 'hw.rf.all'),
        contains(dependencies.analyze_changeset.outputs['analyze.gen_testlist.UhdTestList'], 'hw.rf.x4xx'),
        contains(dependencies.analyze_changeset.outputs['analyze.gen_testlist.UhdTestList'], 'hw.rf.x410'),
        contains(dependencies.analyze_changeset.outputs['analyze.gen_testlist.UhdTestList'], 'hw.rf.x440'),
        contains(dependencies.analyze_changeset.outputs['analyze.gen_testlist.UhdTestList'], 'devtest.all'),
        contains(dependencies.analyze_changeset.outputs['analyze.gen_testlist.UhdTestList'], 'devtest.x410'),
        contains(dependencies.analyze_changeset.outputs['analyze.gen_testlist.UhdTestList'], 'devtest.x440')
    ))
  jobs:
  - template: tests/job-uhd-x410-hardware-tests-sdr-test0.yml
    parameters:
      ${{ if contains(parameters.fpga_imgs_source, 'Pipeline') }}:
        fpga_imgs_source: 'Pipeline'
      ${{ else }}:
        fpga_imgs_source: 'Filesystem'
  - template: tests/job-uhd-x440-hardware-tests-sdr-test0.yml
    parameters:
      ${{ if contains(parameters.fpga_imgs_source, 'Pipeline') }}:
        fpga_imgs_source: 'Pipeline'
      ${{ else }}:
        fpga_imgs_source: 'Filesystem'

- stage: test_uhd_x4xx_pebbles_stage
  displayName: RF Test UHD x4xx pebbles
  dependsOn:
  - analyze_changeset
  - build_uhd_stage_linux
  - build_uhd_embedded_system_images
  - build_gnuradio_stage_linux
  - provide_x410_fpga_images_stage
  - provide_x440_fpga_images_stage
  # This will make $(UhdTestList) available to jobs/steps/tasks, but not for the
  # condition.
  variables:
    UhdTestList: $[stageDependencies.analyze_changeset.analyze.outputs['gen_testlist.UhdTestList']]
  condition: >
    and(
      succeeded(),
      or(
        contains(dependencies.analyze_changeset.outputs['analyze.gen_testlist.UhdTestList'], 'hw.rf.all'),
        contains(dependencies.analyze_changeset.outputs['analyze.gen_testlist.UhdTestList'], 'hw.rf.x4xx'),
        contains(dependencies.analyze_changeset.outputs['analyze.gen_testlist.UhdTestList'], 'hw.rf.x410'),
        contains(dependencies.analyze_changeset.outputs['analyze.gen_testlist.UhdTestList'], 'hw.rf.x440')
    ))
  jobs:
  - template: tests/job-uhd-x410-hardware-tests-pebbles.yml
    parameters:
      ${{ if contains(parameters.fpga_imgs_source, 'Pipeline') }}:
        fpga_imgs_source: 'Pipeline'
      ${{ else }}:
        fpga_imgs_source: 'Filesystem'
      testLength: ${{ parameters.testLength }}
  - template: tests/job-uhd-x440-hardware-tests-pebbles.yml
    parameters:
      ${{ if contains(parameters.fpga_imgs_source, 'Pipeline') }}:
        fpga_imgs_source: 'Pipeline'
      ${{ else }}:
        fpga_imgs_source: 'Filesystem'
      testLength: ${{ parameters.testLength }}

- stage: test_uhd_x4xx_saison_stage
  displayName: RF Test UHD x4xx saison
  dependsOn:
  - build_uhd_stage_linux
  - build_uhd_embedded_system_images
  - build_gnuradio_stage_linux
  - analyze_changeset
  - provide_x410_fpga_images_stage
  - provide_x440_fpga_images_stage
  # This will make $(UhdTestList) available to jobs/steps/tasks, but not for the
  # condition.
  variables:
    UhdTestList: $[stageDependencies.analyze_changeset.analyze.outputs['gen_testlist.UhdTestList']]
  condition: >
    and(
      succeeded(),
      or(
        contains(dependencies.analyze_changeset.outputs['analyze.gen_testlist.UhdTestList'], 'hw.rf.all'),
        contains(dependencies.analyze_changeset.outputs['analyze.gen_testlist.UhdTestList'], 'hw.rf.x4xx'),
        contains(dependencies.analyze_changeset.outputs['analyze.gen_testlist.UhdTestList'], 'hw.rf.x410'),
        contains(dependencies.analyze_changeset.outputs['analyze.gen_testlist.UhdTestList'], 'hw.rf.x440')
      )
    )
  jobs:
  - template: tests/job-uhd-x440-hardware-tests-saison.yml
    parameters:
      ${{ if contains(parameters.fpga_imgs_source, 'Pipeline') }}:
        fpga_imgs_source: 'Pipeline'
      ${{ else }}:
        fpga_imgs_source: 'Filesystem'
      extra_rf_test_args: --test_selector test_rx_phase_coherence.py test_tx_phase_coherence.py
      testLength: ${{ parameters.testLength }}

- stage: test_uhd_rf_test_stage
  displayName: RF Test UHD n3xx pebbles
  dependsOn:
  - analyze_changeset
  - build_uhd_stage_linux
  - build_uhd_embedded_system_images
  - build_gnuradio_stage_linux
  - provide_n300_fpga_images_stage
  - provide_n310_fpga_images_stage
  - provide_n320_fpga_images_stage
  condition: >
    and(
      succeeded(),
      or(
        contains(dependencies.analyze_changeset.outputs['analyze.gen_testlist.UhdTestList'], 'hw.rf.all'),
        contains(dependencies.analyze_changeset.outputs['analyze.gen_testlist.UhdTestList'], 'hw.rf.n320'),
        contains(dependencies.analyze_changeset.outputs['analyze.gen_testlist.UhdTestList'], 'hw.rf.n310'),
        contains(dependencies.analyze_changeset.outputs['analyze.gen_testlist.UhdTestList'], 'hw.rf.n3xx')
      )
    )
  jobs:
  - template: job-uhd-rf-tests-pebbles.yml
    parameters:
      uhdSrcDir: $(Build.SourcesDirectory)/uhddev
      fpga_imgs_source: ${{ parameters.fpga_imgs_source }}
      testDevices: 'n3xx'

- stage: test_streaming_beauty_stage
  displayName: Test UHD Streaming beauty
  dependsOn:
  - analyze_changeset
  - build_uhd_stage_linux
  - build_uhd_embedded_system_images
  - provide_x300_fpga_images_stage
  - provide_x310_fpga_images_stage
  - provide_x410_fpga_images_stage
  condition: >
    and(
      succeeded(),
      contains(dependencies.analyze_changeset.outputs['analyze.gen_testlist.UhdTestList'], 'hw.streaming')
    )
  jobs:
  - template: job-uhd-streaming-tests-beauty.yml
    parameters:
      uhdSrcDir: $(Build.SourcesDirectory)/uhddev
      testLength: ${{ parameters.testLength }}
  - template: job-uhd-streaming-tests-s175.yml
    parameters:
      uhdSrcDir: $(Build.SourcesDirectory)/uhddev
      testLength: ${{ parameters.testLength }}

- stage: test_streaming_x440_stage
  displayName: Test UHD Streaming x440
  dependsOn:
  - analyze_changeset
  - build_uhd_stage_linux
  - build_uhd_embedded_system_images
  - provide_x440_fpga_images_stage
  condition: >
    and(
      succeeded(),
      contains(dependencies.analyze_changeset.outputs['analyze.gen_testlist.UhdTestList'], 'hw.streaming')
    )
  jobs:
  - template: job-uhd-streaming-tests-x440.yml
    parameters:
      uhdSrcDir: $(Build.SourcesDirectory)/uhddev
      testLength: ${{ parameters.testLength }}

- stage: test_labview_usrp_examples
  displayName: Test LabVIEW USRP Examples
  dependsOn:
  - analyze_changeset
  - build_uhd_installer_stage_win
  jobs:
  - template: job-uhd-usrp-tests-uhdlvtest.yml
    parameters:
      uhdSrcDir: $(Build.SourcesDirectory)
      fpga_imgs_source: ${{ parameters.fpga_imgs_source }}