parameters:
- name: uhdSrcDir
  type: string
- name: uhdBuildDir
  type: string
- name: uhdInstallerDir
  type: string
- name: uhdImageDir
  type: string
- name: uhdReleaseBinaries
  type: boolean
  default: false
- name: uhdBuildPythonAPI
  type: boolean
  default: false
- name: uhdImagesDownloaderExtraArgs
  type: string
  default: ""
- name: cmakeCompiler
  type: string
- name: cmakeArch
  type: string
- name: vsArch
  type: string
- name: vsYear
  type: string
- name: uhdVcpkgManifestDir
  type: string
- name: cleanTargetFolder
  type: boolean
  default: true

steps:
- script: |
    copy /y ${{ parameters.uhdSrcDir }}\.ci\docker\vcpkg\vcpkg.json vcpkg.json
    %VCPKG_INSTALL_DIR%\vcpkg.exe install --triplet uhd-x64-windows-static-md --clean-after-build
  workingDirectory: ${{ parameters.uhdVcpkgManifestDir }}
  displayName: refresh vcpkg dependencies

- script: |
    mkdir ${{ parameters.uhdBuildDir }}
    cd ${{ parameters.uhdBuildDir }}
    cmake ${{ parameters.uhdSrcDir }}/host ^
      -DVCPKG_TARGET_TRIPLET=uhd-$(vsArch)-windows-static-md ^
      -DCMAKE_TOOLCHAIN_FILE=%VCPKG_INSTALL_DIR%/scripts/buildsystems/vcpkg.cmake ^
      -DVCPKG_INSTALLED_DIR=${{ parameters.uhdVcpkgManifestDir }}\vcpkg_installed ^
      -DVCPKG_MANIFEST_DIR=${{ parameters.uhdVcpkgManifestDir }}
    mkdir ${{ parameters.uhdImageDir }}
    python ${{ parameters.uhdBuildDir }}/utils/uhd_images_downloader.py -i ${{ parameters.uhdImageDir }} ${{ parameters.uhdImagesDownloaderExtraArgs }}
  displayName: Download uhd-images
  timeoutInMinutes: 30

- script: |
    cd $(Pipeline.Workspace)
    rmdir ${{ parameters.uhdBuildDir }} /s /q
  displayName: Clean build directory

- script: |
    mkdir ${{ parameters.uhdBuildDir }}
    cd ${{ parameters.uhdBuildDir }}
    if "${{ parameters.uhdReleaseBinaries }}" == "True" (
      echo "Setting Release Mode"
      SET UHD_CI_CMAKE_RELEASE_MODE="-DUHD_RELEASE_MODE=release"
    )
    if "${{ parameters.uhdBuildPythonAPI }}" == "True" (
      echo "Setting Python API Build"
      SET UHD_CI_CMAKE_PYTHON="-DENABLE_PYTHON_API=ON"
      SET UHD_CI_CMAKE_SIM="-DENABLE_SIM=OFF"
    )
    cmake ${{ parameters.uhdSrcDir }}/host ^
      -DVCPKG_TARGET_TRIPLET=uhd-$(vsArch)-windows-static-md ^
      -DCMAKE_TOOLCHAIN_FILE=%VCPKG_INSTALL_DIR%/scripts/buildsystems/vcpkg.cmake ^
      -DVCPKG_INSTALLED_DIR=${{ parameters.uhdVcpkgManifestDir }}\vcpkg_installed ^
      -DVCPKG_MANIFEST_DIR=${{ parameters.uhdVcpkgManifestDir }} ^
      -DUHD_IMAGES_SRC_DIR="${{ parameters.uhdImageDir }}" ^
      -DUHD_IMAGES_DIR="C:\\Program Files (x86)\\UHD\\share\\uhd\\images,C:\\Program Files\\UHD\\share\\uhd\\images" ^
      -DENABLE_EXTEND_WIN_PACKAGING=ON ^
      -DSPECIFY_MSVC_VERSION=ON ^
      -DENABLE_DOXYGEN_SHORTNAMES=ON ^
      %UHD_CI_CMAKE_OPTIONS% ^
      %UHD_CI_CMAKE_RELEASE_MODE% ^
      %UHD_CI_CMAKE_PYTHON% ^
      %UHD_CI_CMAKE_SIM% ^
      -G "$(cmakeCompiler)" -A $(cmakeArch)
  displayName: cmake msbuild UHD

- script: |
    cd ${{ parameters.uhdBuildDir }}
    call "C:\Program Files (x86)\Microsoft Visual Studio\$(vsYear)\BuildTools\VC\Auxiliary\Build\vcvarsall.bat" $(vsArch)
    msbuild.exe package.vcxproj -maxCpuCount -p:configuration=release
  displayName: msbuild package

- task: CopyFiles@2
  inputs:
    sourceFolder: ${{ parameters.uhdBuildDir }}
    contents: 'uhd_*.exe'
    targetFolder: '$(Build.BinariesDirectory)/uhddev-installer'
    cleanTargetFolder: ${{ parameters.cleanTargetFolder }}
  displayName: Copy msbuild installer
- ${{if parameters.uhdBuildPythonAPI }}:
  - task: CopyFiles@2
    inputs:
      sourceFolder: ${{ parameters.uhdBuildDir }}
      contents: '**/uhd-*.whl'
      targetFolder: '$(Build.BinariesDirectory)/uhddev-installer'
      flattenFolders: True
      cleanTargetFolder: ${{ parameters.cleanTargetFolder }}
    displayName: Copy wheel from Poetry build
